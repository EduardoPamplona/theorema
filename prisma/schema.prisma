// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  userName String   @unique
  picture  String?
  role     UserRole @default(STUDENT)

  engagedExercises StudentEngagedExercise[]
  engagedSubjects  StudentEngagedTopic[]

  createdAt DateTime? @default(now()) @updatedAt
  updatedAt DateTime? @updatedAt
}

model Exercise {
  id         Int     @id @default(autoincrement())
  title      String  @unique
  statemenet String?

  questions    ExerciseQuestion[]
  subject      Subject[]
  topics       Topic[]
  engagedUsers StudentEngagedExercise[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExerciseQuestion {
  id               Int                        @id @default(autoincrement())
  title            String                     @unique
  description      String
  difficulty       ExerciseQuestionDifficulty
  type             ExerciseQuestionType
  answerPrompt     String?
  solution         String?
  detailedSolution String
  solutionSteps    String

  exerciseId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  conceptExplanations ConceptExplanation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([exerciseId])
  @@index([topicId])
}

model StudentEngagedExercise {
  id     String                       @id @default(uuid())
  status StudentEngagedExerciseStatus @default(IN_PROGRESS)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  exerciseId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([userId])
  @@index([exerciseId])
}

// For example Mathematics, Physics, etc.
// at the moment only "matem√°tica a" is supported
model Subject {
  id    String @id @default(uuid())
  title String @unique @default("")

  exercises Exercise[]
  topics    Topic[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

// For example Algebra, Geometry, etc.
model Topic {
  id                   String @id @default(uuid())
  title                String @unique
  dgeOfficialReference String @unique // see https://www.dge.mec.pt/sites/default/files/ficheiros/programa_metas_curriculares_matematica_a_secundario.pdf

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  exercises         Exercise[]
  exerciseQuestions ExerciseQuestion[]

  // onDelete is set to NoAction because prisma does not support cascade delete on self relations, need to be done manually in application (topics will rarely be deleted so it's ok)
  parentTopicId String
  parentTopic   Topic?  @relation("TopicToTopic", fields: [parentTopicId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  subTopics     Topic[] @relation("TopicToTopic")

  engagedStudents StudentEngagedTopic[]

  conceptExplanations ConceptExplanation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  @@index([subjectId])
  @@index([parentTopicId])
}

model StudentEngagedTopic {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([topicId])
  @@index([userId])
}

model ConceptExplanation {
  id          String @id @default(uuid())
  title       String @unique
  description String

  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  // exerciseQuestions ExerciseQuestion[]
  exerciseQuestionId Int?
  exerciseQuestion   ExerciseQuestion? @relation(fields: [exerciseQuestionId], references: [id])

  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  @@index([topicId])
  @@index([exerciseQuestionId])
}


enum UserRole {
  PROFESSOR
  STUDENT
}

enum ExerciseQuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

enum StudentEngagedExerciseStatus {
  IN_PROGRESS
  FINISHED
}

enum ExerciseQuestionType {
  MULTIPLE_CHOICE
  TRUE_OR_FALSE
  OPEN_ANSWER
}
